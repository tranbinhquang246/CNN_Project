# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import tkinter as tk
from tkinter import filedialog
import tensorflow
from keras.preprocessing import image
import matplotlib.pyplot as plt
import numpy as np
import os
import sys


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(454, 482)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.image = QtWidgets.QLabel(self.centralwidget)
        self.image.setGeometry(QtCore.QRect(20, 40, 411, 271))
        self.image.setText("")
        self.image.setPixmap(QtGui.QPixmap("image/download.jpg"))
        self.image.setScaledContents(True)
        self.image.setObjectName("image")
        self.Title = QtWidgets.QLabel(self.centralwidget)
        self.Title.setGeometry(QtCore.QRect(10, 5, 241, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.Title.setFont(font)
        self.Title.setObjectName("Title")
        self.label_predict = QtWidgets.QLabel(self.centralwidget)
        self.label_predict.setGeometry(QtCore.QRect(30, 390, 47, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_predict.setFont(font)
        self.label_predict.setObjectName("label_predict")
        self.output_predict = QtWidgets.QLabel(self.centralwidget)
        self.output_predict.setGeometry(QtCore.QRect(90, 390, 221, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.output_predict.setFont(font)
        self.output_predict.setObjectName("output_predict")
        self.button_predict = QtWidgets.QPushButton(self.centralwidget)
        self.button_predict.setGeometry(QtCore.QRect(360, 380, 75, 31))
        self.button_predict.setObjectName("button_predict")
        self.button_predict.clicked.connect(self.Predict)
        self.button_choose_img = QtWidgets.QPushButton(self.centralwidget)
        self.button_choose_img.setGeometry(QtCore.QRect(310, 330, 121, 23))
        self.button_choose_img.setObjectName("button_choose_img")
        self.button_choose_img.clicked.connect(self.Open_File)
        self.filepath = QtWidgets.QTextEdit(self.centralwidget)
        self.filepath.setGeometry(QtCore.QRect(1, 1, 1, 1))
        self.filepath.setObjectName("filepath")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 454, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Title.setText(_translate("MainWindow", "Garbage Classification"))
        self.label_predict.setText(_translate("MainWindow", "Predict:"))
        self.output_predict.setText(_translate("MainWindow", "Result"))
        self.button_predict.setText(_translate("MainWindow", "Predict"))
        self.button_choose_img.setText(_translate("MainWindow", "Choose an image"))

    def Open_File(self):
        root = tk.Tk()
        root.withdraw()
        self.file_path = filedialog.askopenfilename()
        if (self.file_path):
            self.image.setPixmap(QtGui.QPixmap(self.file_path))
            self.filepath.setText(self.file_path)
        else:
            self.image.setPixmap(QtGui.QPixmap("image/download.jpg"))

    def load_image(self,img_path):
        img = image.load_img(img_path, target_size=(148, 198))
        img_tensor = image.img_to_array(img)
        img_tensor = np.expand_dims(img_tensor, axis=0)
        img_tensor /= 255.
        return img_tensor
    def Predict(self):
        file_path = self.filepath.toPlainText()
        processing_image = self.load_image(file_path)
        pred = model.predict(processing_image)
        predict = labels[np.argmax(pred)]
        self.output_predict.setText(predict)
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    model = tensorflow.keras.models.load_model('model/model_train_v2.h5')
    labels = ['cardboard', 'glass', 'metal', 'paper', 'plastic', 'trash']
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
